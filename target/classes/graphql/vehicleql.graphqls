type Vehicle{
    id: ID!,
    type: String,
    modelCode: String,
    brandName: String
}

type Company{
    id: ID!,
    name: String!,
    description: String!,
    jobs: [Job]
    reviews: [Review]
}

type Job{
    id: ID!,
    title:String!,
    description:String!,
    minSalary:String!,
    maxSalary:String!,
    location:String!,
    company:Company
}

type Review{
    id:ID!,
    title: String!,
    description:String!,
    rating: Float!
    company:Company
}

type Query{
    vehicles(count: Int):[Vehicle]
    vehicle(id: ID):Vehicle

    getAllCompanies:[Company]
    getCompanyById(id: ID):Company

    getAllReviews(id:ID):[Review]
    getReviewById(companyId:ID, reviewId:ID):Review

    getAllJobs:[Job]
    getJobById(id:ID):Job
}

type Mutation{
    createCompany(name:String!, description:String!, jobs:[JobInput], reviews:[ReviewInput]):Company
    updateCompany(id:ID!, companyInput:CompanyInput):Company
    deleteCompanyById(id:ID):Boolean

    deleteJobById(id:ID!):Boolean
    createJob(title:String, description:String, minSalary:String, maxSalary:String, location:String, companyId:ID):String
    updateJob(jobId:ID, title:String, description:String, minSalary:String, maxSalary:String, location:String, companyId:ID):String

    deleteReviewById(reviewId:ID!, companyId:ID!):Boolean
    createReview(reviewInput:ReviewInput, companyId:ID):String
    updateReview(reviewId:ID, reviewInput:ReviewInput, companyId:ID):String
}

input JobInput{
    id: ID!,
}

input ReviewInput{
    title: String!,
    description:String!,
    rating: Float!
}

input CompanyInput{
    id: ID!,
    name: String!,
    description: String!,
    jobs: [JobInput]
    reviews: [ReviewInput]
}